[project]
name = "databricks-template"
version = "0.1.0"
description = "Modern Databricks Template - FastAPI backend with React TypeScript frontend"
authors = [
  { name = "Robby Kiskanyan", email = "robby.kiskanyan@databricks.com" },
]

requires-python = ">=3.12"

dependencies = [
  "databricks-sdk>=0.67.0",
  "fastapi-mcp>=0.4.0",
  "fastapi>=0.118.0",
  "fastmcp>=2.12.4",
  "httpx>=0.28.1",
  "mcp[cli]>=1.16.0",
  "polars>=1.34.0",
  "pydantic>=2.11.10",
  "pytest>=8.4.2",
  "python-dotenv>=1.1.1",
  "pyyaml>=6.0.3",
  "unitycatalog-ai>=0.3.2",
  "uvicorn>=0.37.0",
  "databricks-sdk==0.67.0",
  "databricks-sql-connector>=4.1.3",
  "debugpy>=1.8.17",
  "mlflow[databricks]>=3.4.0",
  "playwright>=1.55.0",
  "requests>=2.32.5",
  "rich>=14.1.0",
]

[dependency-groups]
dev = [
  "databricks-sdk>=0.67.0",
  "fastapi-mcp>=0.4.0",
  "fastapi>=0.118.0",
  "fastmcp>=2.12.4",
  "httpx>=0.28.1",
  "mcp[cli]>=1.16.0",
  "polars>=1.34.0",
  "pydantic>=2.11.10",
  "pytest>=8.4.2",
  "python-dotenv>=1.1.1",
  "pyyaml>=6.0.3",
  "unitycatalog-ai>=0.3.2",
  "uvicorn>=0.37.0",
  "databricks-connect>=15.4,<16",
  "databricks-sdk==0.67.0",
  "databricks-sdk[notebook]>=0.67.0",
  "databricks-sql-connector>=4.1.3",
  "debugpy>=1.8.17",
  "ipykernel>=6.30.1",
  "mlflow[databricks]>=3.4.0",
  "nbformat>=5.10.4",
  "pip>=25.2",
  "playwright>=1.55.0",
  "plotly>=6.3.1",
  "pytest>=8.3.4",
  "python-dotenv>=1.0.1",
  "requests>=2.32.5",
  "rich>=14.1.0",
  "ruff>=0.13.3",
  "tomli>=2.2.1",
  "ty>=0.0.1a14",
  "watchdog>=6.0.0",
]

[project.scripts]
dbcn = "databricks_connect.dbcn:main"
main = "databricks_connect.main:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/databricks_connect"]

[tool.pytest.ini_options]
pythonpath = "src"
testpaths = ["tests"]

[tool.ruff]
line-length = 100
indent-width = 2
# Assume Python 3.12.
target-version = "py312"
# Enable auto-fix
fix = true

# Exclude a variety of commonly ignored directories.
exclude = [
  "__pycache__",
  ".bzr",
  ".direnv",
  ".eggs",
  ".git",
  ".hg",
  ".mypy_cache",
  ".nox",
  ".pants.d",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  "__pypackages__",
  "_build",
  "buck-out",
  "build",
  "dist",
  "node_modules",
  "venv",
  "client",
]

[tool.ruff.format]
quote-style = "single"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint]
# Enable Pyflakes `F`, pycodestyle "W" and `E`, "Q" quotes, "I" imports.
ignore = [
  "D105", # Missing docstring in magic method.
  "D106", # Missing docstring in a public nested class.
  "D107", # Missing docstring in __init__.
  "D203", # 1 blank line required before class docstring.
  "D204", # 1 blank line required after class docstring.
  "D213", # Multi-line docstring summary should start at the second line.
  "D401", # First line of docstring should be in imperative mood: "{first_line}"
  "D407", # Missing dashed underline after section.
]
select = ["E", "W", "F", "Q", "I", "D"]

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.ruff.lint.flake8-quotes]
inline-quotes = "single"

[tool.ruff.lint.per-file-ignores]
"*_test.py" = ["D101", "D102", "D103", "D104"]
"__init__.py" = ["D104"]

[tool.ruff.lint.pep8-naming]
# Allow Pydantic's `@validator` decorator to trigger class method treatment.
classmethod-decorators = ["classmethod", "pydantic.validator"]

[tool.ruff.lint.pydocstyle]
convention = "google"
